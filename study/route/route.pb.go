// Code generated by protoc-gen-go. DO NOT EDIT.
// source: route.proto

package route

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Person_PhoneType int32

const (
	Person_MOBILE Person_PhoneType = 0
	Person_HOME   Person_PhoneType = 1
	Person_WORK   Person_PhoneType = 2
)

var Person_PhoneType_name = map[int32]string{
	0: "MOBILE",
	1: "HOME",
	2: "WORK",
}

var Person_PhoneType_value = map[string]int32{
	"MOBILE": 0,
	"HOME":   1,
	"WORK":   2,
}

func (x Person_PhoneType) String() string {
	return proto.EnumName(Person_PhoneType_name, int32(x))
}

func (Person_PhoneType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{3, 0}
}

// 凭证
type Token struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Tokens struct {
	Token                []*Token `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tokens) Reset()         { *m = Tokens{} }
func (m *Tokens) String() string { return proto.CompactTextString(m) }
func (*Tokens) ProtoMessage()    {}
func (*Tokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{1}
}

func (m *Tokens) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tokens.Unmarshal(m, b)
}
func (m *Tokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tokens.Marshal(b, m, deterministic)
}
func (m *Tokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tokens.Merge(m, src)
}
func (m *Tokens) XXX_Size() int {
	return xxx_messageInfo_Tokens.Size(m)
}
func (m *Tokens) XXX_DiscardUnknown() {
	xxx_messageInfo_Tokens.DiscardUnknown(m)
}

var xxx_messageInfo_Tokens proto.InternalMessageInfo

func (m *Tokens) GetToken() []*Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type Persons struct {
	Person               []*Person `protobuf:"bytes,1,rep,name=person,proto3" json:"person,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Persons) Reset()         { *m = Persons{} }
func (m *Persons) String() string { return proto.CompactTextString(m) }
func (*Persons) ProtoMessage()    {}
func (*Persons) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{2}
}

func (m *Persons) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Persons.Unmarshal(m, b)
}
func (m *Persons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Persons.Marshal(b, m, deterministic)
}
func (m *Persons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Persons.Merge(m, src)
}
func (m *Persons) XXX_Size() int {
	return xxx_messageInfo_Persons.Size(m)
}
func (m *Persons) XXX_DiscardUnknown() {
	xxx_messageInfo_Persons.DiscardUnknown(m)
}

var xxx_messageInfo_Persons proto.InternalMessageInfo

func (m *Persons) GetPerson() []*Person {
	if m != nil {
		return m.Person
	}
	return nil
}

// 用户信息
type Person struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   int32                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Email                string                `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                []*Person_PhoneNumber `protobuf:"bytes,4,rep,name=phone,proto3" json:"phone,omitempty"`
	Car                  bool                  `protobuf:"varint,5,opt,name=car,proto3" json:"car,omitempty"`
	Money                float32               `protobuf:"fixed32,6,opt,name=money,proto3" json:"money,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{3}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Person) GetPhone() []*Person_PhoneNumber {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *Person) GetCar() bool {
	if m != nil {
		return m.Car
	}
	return false
}

func (m *Person) GetMoney() float32 {
	if m != nil {
		return m.Money
	}
	return 0
}

type Person_PhoneNumber struct {
	Number               string           `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type                 Person_PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=route.Person_PhoneType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Person_PhoneNumber) Reset()         { *m = Person_PhoneNumber{} }
func (m *Person_PhoneNumber) String() string { return proto.CompactTextString(m) }
func (*Person_PhoneNumber) ProtoMessage()    {}
func (*Person_PhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{3, 0}
}

func (m *Person_PhoneNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person_PhoneNumber.Unmarshal(m, b)
}
func (m *Person_PhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person_PhoneNumber.Marshal(b, m, deterministic)
}
func (m *Person_PhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person_PhoneNumber.Merge(m, src)
}
func (m *Person_PhoneNumber) XXX_Size() int {
	return xxx_messageInfo_Person_PhoneNumber.Size(m)
}
func (m *Person_PhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_Person_PhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_Person_PhoneNumber proto.InternalMessageInfo

func (m *Person_PhoneNumber) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Person_PhoneNumber) GetType() Person_PhoneType {
	if m != nil {
		return m.Type
	}
	return Person_MOBILE
}

func init() {
	proto.RegisterEnum("route.Person_PhoneType", Person_PhoneType_name, Person_PhoneType_value)
	proto.RegisterType((*Token)(nil), "route.Token")
	proto.RegisterType((*Tokens)(nil), "route.Tokens")
	proto.RegisterType((*Persons)(nil), "route.Persons")
	proto.RegisterType((*Person)(nil), "route.Person")
	proto.RegisterType((*Person_PhoneNumber)(nil), "route.Person.PhoneNumber")
}

func init() { proto.RegisterFile("route.proto", fileDescriptor_0984d49a362b6b9f) }

var fileDescriptor_0984d49a362b6b9f = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0xaa, 0xd3, 0x40,
	0x14, 0x85, 0x3b, 0x69, 0x26, 0xe7, 0x9c, 0x1d, 0x4f, 0x09, 0x5b, 0xf1, 0xc4, 0x5e, 0x85, 0x11,
	0x21, 0xd0, 0x92, 0x96, 0xfa, 0x04, 0x16, 0x4a, 0x2d, 0x5a, 0x13, 0xc6, 0x82, 0xd7, 0xfd, 0x19,
	0x35, 0xd8, 0xcc, 0x84, 0x64, 0x7a, 0x91, 0x77, 0xf1, 0x6d, 0x7c, 0x31, 0xc9, 0x4c, 0x94, 0x06,
	0x7b, 0xe1, 0xdd, 0xda, 0xb3, 0xbe, 0xec, 0xb5, 0x32, 0x0c, 0xf8, 0x95, 0xba, 0x68, 0x91, 0x94,
	0x95, 0xd2, 0x0a, 0xa9, 0x19, 0xd8, 0x13, 0xd0, 0x9d, 0xfa, 0x21, 0x24, 0x8e, 0xc0, 0xc9, 0x4f,
	0x21, 0x89, 0x48, 0x4c, 0xb9, 0x93, 0x9f, 0xd8, 0x14, 0x3c, 0x63, 0xd4, 0xc8, 0x80, 0xea, 0x56,
	0x85, 0x24, 0x1a, 0xc6, 0xfe, 0xe2, 0x59, 0x62, 0xd7, 0x18, 0x97, 0x5b, 0x8b, 0xcd, 0xe1, 0x2e,
	0x13, 0x55, 0xad, 0x64, 0x8d, 0x6f, 0xc0, 0x2b, 0x8d, 0xec, 0xf8, 0xc7, 0x8e, 0xb7, 0x3e, 0xef,
	0x4c, 0xf6, 0xd3, 0x01, 0xcf, 0x1e, 0x21, 0x82, 0x2b, 0xf7, 0x85, 0x30, 0xe1, 0x0f, 0xdc, 0xe8,
	0xae, 0x8e, 0xf3, 0xa7, 0x0e, 0xbe, 0x00, 0x2a, 0x8a, 0x7d, 0x7e, 0x0e, 0x87, 0x06, 0xb2, 0x03,
	0xce, 0x80, 0x96, 0xdf, 0x95, 0x14, 0xa1, 0x6b, 0xa2, 0x5e, 0xf5, 0xa2, 0x92, 0xac, 0xb5, 0x3e,
	0x5d, 0x8a, 0x83, 0xa8, 0xb8, 0xe5, 0x30, 0x80, 0xe1, 0x71, 0x5f, 0x85, 0x34, 0x22, 0xf1, 0x3d,
	0x6f, 0x65, 0xbb, 0xb8, 0x50, 0x52, 0x34, 0xa1, 0x17, 0x91, 0xd8, 0xe1, 0x76, 0x18, 0x73, 0xf0,
	0xaf, 0xbe, 0xc6, 0x97, 0xe0, 0x49, 0xa3, 0xba, 0x8e, 0xdd, 0x84, 0x13, 0x70, 0x75, 0x53, 0x0a,
	0xd3, 0x73, 0xb4, 0x78, 0xba, 0x11, 0xbf, 0x6b, 0x4a, 0xc1, 0x0d, 0xc4, 0x26, 0xf0, 0xf0, 0xf7,
	0x08, 0x01, 0xbc, 0x6d, 0xba, 0xdc, 0x7c, 0x5c, 0x05, 0x03, 0xbc, 0x07, 0xf7, 0x7d, 0xba, 0x5d,
	0x05, 0xa4, 0x55, 0x5f, 0x52, 0xfe, 0x21, 0x70, 0x16, 0xbf, 0x08, 0x50, 0xde, 0x6e, 0xc3, 0x09,
	0xc0, 0x5a, 0xe8, 0x54, 0x8a, 0x8d, 0xfc, 0xaa, 0xb0, 0x77, 0xfb, 0xe3, 0xfe, 0xdd, 0xb2, 0x01,
	0x26, 0x06, 0x7e, 0x77, 0x3e, 0x1b, 0xf8, 0xf1, 0x1a, 0xae, 0xff, 0xa1, 0xe7, 0x04, 0x67, 0xe0,
	0xaf, 0x85, 0xfe, 0xac, 0x8a, 0x5b, 0xdb, 0x47, 0x3d, 0xbe, 0x66, 0x83, 0x98, 0xe0, 0x14, 0xee,
	0xd6, 0x42, 0xff, 0x47, 0x95, 0x98, 0xcc, 0xc9, 0xf2, 0x35, 0x3c, 0xcf, 0x55, 0xf2, 0xad, 0x2a,
	0x8f, 0x49, 0xad, 0x2f, 0xa7, 0xc6, 0x32, 0x4b, 0x30, 0x7f, 0x96, 0xb5, 0xef, 0x30, 0x23, 0x07,
	0xcf, 0x3c, 0xc8, 0xb7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xb5, 0xdf, 0x7b, 0x9f, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouteClient is the client API for Route service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteClient interface {
	// 一个 简单 RPC
	//
	// 客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样。
	GetOneInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Person, error)
	// 一个 服务器端流式 RPC
	//
	// 客户端发送请求到服务器，拿到一个流去读取返回的消息序列。
	// 客户端读取返回的流，直到里面没有任何消息。
	// 从例子中可以看出，通过在 响应 类型前插入 stream 关键字，可以指定一个服务器端的流方法。
	GetAllInfo(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (Route_GetAllInfoClient, error)
	// 一个 客户端流式 RPC
	//
	// 客户端写入一个消息序列并将其发送到服务器，同样也是使用流。
	// 一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	// 通过在 请求 类型前指定 stream 关键字来指定一个客户端的流方法。
	GetSomeInfo(ctx context.Context, opts ...grpc.CallOption) (Route_GetSomeInfoClient, error)
	// 一个 双向流式 RPC
	//
	// 两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
	// 比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。
	// 每个流中的消息顺序被预留。你可以通过在请求和响应前加 stream 关键字去制定方法的类型。
	GetInfo(ctx context.Context, opts ...grpc.CallOption) (Route_GetInfoClient, error)
}

type routeClient struct {
	cc *grpc.ClientConn
}

func NewRouteClient(cc *grpc.ClientConn) RouteClient {
	return &routeClient{cc}
}

func (c *routeClient) GetOneInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/route.Route/GetOneInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) GetAllInfo(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (Route_GetAllInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[0], "/route.Route/GetAllInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGetAllInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Route_GetAllInfoClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type routeGetAllInfoClient struct {
	grpc.ClientStream
}

func (x *routeGetAllInfoClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeClient) GetSomeInfo(ctx context.Context, opts ...grpc.CallOption) (Route_GetSomeInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[1], "/route.Route/GetSomeInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGetSomeInfoClient{stream}
	return x, nil
}

type Route_GetSomeInfoClient interface {
	Send(*Token) error
	CloseAndRecv() (*Persons, error)
	grpc.ClientStream
}

type routeGetSomeInfoClient struct {
	grpc.ClientStream
}

func (x *routeGetSomeInfoClient) Send(m *Token) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGetSomeInfoClient) CloseAndRecv() (*Persons, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Persons)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeClient) GetInfo(ctx context.Context, opts ...grpc.CallOption) (Route_GetInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[2], "/route.Route/GetInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGetInfoClient{stream}
	return x, nil
}

type Route_GetInfoClient interface {
	Send(*Token) error
	Recv() (*Person, error)
	grpc.ClientStream
}

type routeGetInfoClient struct {
	grpc.ClientStream
}

func (x *routeGetInfoClient) Send(m *Token) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGetInfoClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteServer is the server API for Route service.
type RouteServer interface {
	// 一个 简单 RPC
	//
	// 客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样。
	GetOneInfo(context.Context, *Token) (*Person, error)
	// 一个 服务器端流式 RPC
	//
	// 客户端发送请求到服务器，拿到一个流去读取返回的消息序列。
	// 客户端读取返回的流，直到里面没有任何消息。
	// 从例子中可以看出，通过在 响应 类型前插入 stream 关键字，可以指定一个服务器端的流方法。
	GetAllInfo(*Tokens, Route_GetAllInfoServer) error
	// 一个 客户端流式 RPC
	//
	// 客户端写入一个消息序列并将其发送到服务器，同样也是使用流。
	// 一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
	// 通过在 请求 类型前指定 stream 关键字来指定一个客户端的流方法。
	GetSomeInfo(Route_GetSomeInfoServer) error
	// 一个 双向流式 RPC
	//
	// 两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
	// 比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。
	// 每个流中的消息顺序被预留。你可以通过在请求和响应前加 stream 关键字去制定方法的类型。
	GetInfo(Route_GetInfoServer) error
}

func RegisterRouteServer(s *grpc.Server, srv RouteServer) {
	s.RegisterService(&_Route_serviceDesc, srv)
}

func _Route_GetOneInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).GetOneInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route.Route/GetOneInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).GetOneInfo(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_GetAllInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Tokens)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteServer).GetAllInfo(m, &routeGetAllInfoServer{stream})
}

type Route_GetAllInfoServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type routeGetAllInfoServer struct {
	grpc.ServerStream
}

func (x *routeGetAllInfoServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _Route_GetSomeInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServer).GetSomeInfo(&routeGetSomeInfoServer{stream})
}

type Route_GetSomeInfoServer interface {
	SendAndClose(*Persons) error
	Recv() (*Token, error)
	grpc.ServerStream
}

type routeGetSomeInfoServer struct {
	grpc.ServerStream
}

func (x *routeGetSomeInfoServer) SendAndClose(m *Persons) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGetSomeInfoServer) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Route_GetInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServer).GetInfo(&routeGetInfoServer{stream})
}

type Route_GetInfoServer interface {
	Send(*Person) error
	Recv() (*Token, error)
	grpc.ServerStream
}

type routeGetInfoServer struct {
	grpc.ServerStream
}

func (x *routeGetInfoServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGetInfoServer) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Route_serviceDesc = grpc.ServiceDesc{
	ServiceName: "route.Route",
	HandlerType: (*RouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneInfo",
			Handler:    _Route_GetOneInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllInfo",
			Handler:       _Route_GetAllInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSomeInfo",
			Handler:       _Route_GetSomeInfo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetInfo",
			Handler:       _Route_GetInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "route.proto",
}
