// 官方文档 https://developers.google.com/protocol-buffers/docs/proto3

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.study.route";
option java_outer_classname = "RouteProto";

package route;

// Interface exported by the server.
service Route {
  // 一个 简单 RPC 
  // 
  // 客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样。
  rpc GetOneInfo(Token) returns (Person) {}


  // 一个 服务器端流式 RPC 
  //
  // 客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 
  // 客户端读取返回的流，直到里面没有任何消息。
  // 从例子中可以看出，通过在 响应 类型前插入 stream 关键字，可以指定一个服务器端的流方法。
  rpc GetAllInfo(Tokens) returns (stream Person) {}

  // 一个 客户端流式 RPC 
  // 
  // 客户端写入一个消息序列并将其发送到服务器，同样也是使用流。
  // 一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
  // 通过在 请求 类型前指定 stream 关键字来指定一个客户端的流方法。
  rpc GetSomeInfo(stream Token) returns (Persons) {}

  // 一个 双向流式 RPC
  //
  // 两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
  // 比如， 服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。 
  // 每个流中的消息顺序被预留。你可以通过在请求和响应前加 stream 关键字去制定方法的类型。
  rpc GetInfo(stream Token) returns (stream Person) {}
}

// 凭证
message Token {
  int32 id = 1;
}

message Tokens {
  repeated Token token = 1;
}

message Persons {
  repeated Person person = 1;
}

// 用户信息
message Person {
  string name = 1;
  int32 id = 2;
  string email = 3;
  
  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;

    // Reserved Values
    // reserved 1 to max;
    // reserved "HOME";
  }
 
  message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
  }
 
  repeated PhoneNumber phone = 4;
  bool car = 5;
  float money  = 6;

}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
// message Rectangle {
//   // One corner of the rectangle.
//   Point lo = 1;

//   // The other corner of the rectangle.
//   Point hi = 2;
// }

// // A feature names something at a given point.
// //
// // If a feature could not be named, the name is empty.
// message Feature {
//   // The name of the feature.
//   string name = 1;

//   // The point where the feature is detected.
//   Point location = 2;
// }

// // A RouteNote is a message sent while at a given point.
// message RouteNote {
//   // The location from which the message is sent.
//   Point location = 1;

//   // The message to be sent.
//   string message = 2;
// }

// // A RouteSummary is received in response to a RecordRoute rpc.
// //
// // It contains the number of individual points received, the number of
// // detected features, and the total distance covered as the cumulative sum of
// // the distance between each point.
// message RouteSummary {
//   // The number of points received.
//   int32 point_count = 1;

//   // The number of known features passed while traversing the route.
//   int32 feature_count = 2;

//   // The distance covered in metres.
//   int32 distance = 3;

//   // The duration of the traversal in seconds.
//   int32 elapsed_time = 4;
// }
